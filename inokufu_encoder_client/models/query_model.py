# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from inokufu_encoder_client.models.lang_enum import LangEnum

class QueryModel(BaseModel):
    """
    QueryModel
    """
    index: StrictStr = Field(..., description="Index of the query : must be unique")
    query: StrictStr = Field(..., description="User query")
    lang: LangEnum = Field(...)
    __properties = ["index", "query", "lang"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QueryModel:
        """Create an instance of QueryModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QueryModel:
        """Create an instance of QueryModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QueryModel.parse_obj(obj)

        _obj = QueryModel.parse_obj({
            "index": obj.get("index"),
            "query": obj.get("query"),
            "lang": obj.get("lang")
        })
        return _obj

